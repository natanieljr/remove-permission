{"apis": [{"logID": " \"TId: \"+threadId+\" objCls: android.app.ActivityThread mthd: installContentProviders retCls: void params: android.content.Context \"+convert(p0)+\" java.util.List \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "installContentProviders", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.app.ActivityThread->installContentProviders", "className": "android.app.ActivityThread", "platformVersion": "All", "paramList": ["android.content.Context", "java.util.List"], "signature": "redir_android_app_ActivityThread_installContentProviders_53(Object _this , android.content.Context p0, java.util.List p1)", "returnType": "void", "jniSignature": "Landroid/app/ActivityThread;->installContentProviders(Landroid/content/Context;Ljava/util/List;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.app.ActivityManager mthd: getRecentTasks retCls: java.util.List params: int \"+convert(p0)+\" int \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getRecentTasks", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.app.ActivityManager->getRecentTasks", "className": "android.app.ActivityManager", "platformVersion": "All", "paramList": ["int", "int"], "signature": "redir_android_app_ActivityManager_getRecentTasks_54(Object _this , int p0, int p1)", "returnType": "java.util.List", "jniSignature": "Landroid/app/ActivityManager;->getRecentTasks(II)Ljava/util/List;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (java.util.List) monitorHook.hookAfterApiCall(logSignature, (java.util.List) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.app.ActivityManager mthd: getRunningTasks retCls: java.util.List params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getRunningTasks", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.app.ActivityManager->getRunningTasks", "className": "android.app.ActivityManager", "platformVersion": "All", "paramList": ["int"], "signature": "redir_android_app_ActivityManager_getRunningTasks_55(Object _this , int p0)", "returnType": "java.util.List", "jniSignature": "Landroid/app/ActivityManager;->getRunningTasks(I)Ljava/util/List;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (java.util.List) monitorHook.hookAfterApiCall(logSignature, (java.util.List) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.bluetooth.BluetoothHeadset mthd: startVoiceRecognition retCls: boolean params: android.bluetooth.BluetoothDevice \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "startVoiceRecognition", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.bluetooth.BluetoothHeadset->startVoiceRecognition", "className": "android.bluetooth.BluetoothHeadset", "platformVersion": "All", "paramList": ["android.bluetooth.BluetoothDevice"], "signature": "redir_android_bluetooth_BluetoothHeadset_startVoiceRecognition_74(Object _this , android.bluetooth.BluetoothDevice p0)", "returnType": "boolean", "jniSignature": "Landroid/bluetooth/BluetoothHeadset;->startVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.bluetooth.BluetoothHeadset mthd: stopVoiceRecognition retCls: boolean params: android.bluetooth.BluetoothDevice \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "stopVoiceRecognition", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.bluetooth.BluetoothHeadset->stopVoiceRecognition", "className": "android.bluetooth.BluetoothHeadset", "platformVersion": "All", "paramList": ["android.bluetooth.BluetoothDevice"], "signature": "redir_android_bluetooth_BluetoothHeadset_stopVoiceRecognition_75(Object _this , android.bluetooth.BluetoothDevice p0)", "returnType": "boolean", "jniSignature": "Landroid/bluetooth/BluetoothHeadset;->stopVoiceRecognition(Landroid/bluetooth/BluetoothDevice;)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.hardware.Camera mthd: open retCls: android.hardware.Camera params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": true, "methodName": "open", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.hardware.Camera->open", "className": "android.hardware.Camera", "platformVersion": "All", "paramList": ["int"], "signature": "redir_android_hardware_Camera_open_97(int p0)", "returnType": "android.hardware.Camera", "jniSignature": "Landroid/hardware/Camera;->open(I)Landroid/hardware/Camera; static", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invokeStatic (p0);\n        return (android.hardware.Camera) monitorHook.hookAfterApiCall(logSignature, (android.hardware.Camera) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: addGpsStatusListener retCls: boolean params: android.location.GpsStatus.Listener \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "addGpsStatusListener", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.location.LocationManager->addGpsStatusListener", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["android.location.GpsStatus.Listener"], "signature": "redir_android_location_LocationManager_addGpsStatusListener_99(Object _this , android.location.GpsStatus.Listener p0)", "returnType": "boolean", "jniSignature": "Landroid/location/LocationManager;->addGpsStatusListener(Landroid/location/GpsStatus$Listener;)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: addNmeaListener retCls: boolean params: android.location.GpsStatus.NmeaListener \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "addNmeaListener", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.location.LocationManager->addNmeaListener", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["android.location.GpsStatus.NmeaListener"], "signature": "redir_android_location_LocationManager_addNmeaListener_100(Object _this , android.location.GpsStatus.NmeaListener p0)", "returnType": "boolean", "jniSignature": "Landroid/location/LocationManager;->addNmeaListener(Landroid/location/GpsStatus$NmeaListener;)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: addProximityAlert retCls: void params: double \"+convert(p0)+\" double \"+convert(p1)+\" float \"+convert(p2)+\" long \"+convert(p3)+\" android.app.PendingIntent \"+convert(p4)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "addProximityAlert", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->addProximityAlert", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["double", "double", "float", "long", "android.app.PendingIntent"], "signature": "redir_android_location_LocationManager_addProximityAlert_101(Object _this , double p0, double p1, float p2, long p3, android.app.PendingIntent p4)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->addProximityAlert(DDFJLandroid/app/PendingIntent;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: addTestProvider retCls: void params: java.lang.String \"+convert(p0)+\" boolean \"+convert(p1)+\" boolean \"+convert(p2)+\" boolean \"+convert(p3)+\" boolean \"+convert(p4)+\" boolean \"+convert(p5)+\" boolean \"+convert(p6)+\" boolean \"+convert(p7)+\" int \"+convert(p8)+\" int \"+convert(p9)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "addTestProvider", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->addTestProvider", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "int", "int"], "signature": "redir_android_location_LocationManager_addTestProvider_102(Object _this , java.lang.String p0, boolean p1, boolean p2, boolean p3, boolean p4, boolean p5, boolean p6, boolean p7, int p8, int p9)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->addTestProvider(Ljava/lang/String;ZZZZZZZII)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: clearTestProviderEnabled retCls: void params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "clearTestProviderEnabled", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->clearTestProviderEnabled", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_location_LocationManager_clearTestProviderEnabled_103(Object _this , java.lang.String p0)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->clearTestProviderEnabled(Ljava/lang/String;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: clearTestProviderLocation retCls: void params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "clearTestProviderLocation", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->clearTestProviderLocation", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_location_LocationManager_clearTestProviderLocation_104(Object _this , java.lang.String p0)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->clearTestProviderLocation(Ljava/lang/String;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: clearTestProviderStatus retCls: void params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "clearTestProviderStatus", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->clearTestProviderStatus", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_location_LocationManager_clearTestProviderStatus_105(Object _this , java.lang.String p0)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->clearTestProviderStatus(Ljava/lang/String;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: getBestProvider retCls: java.lang.String params: android.location.Criteria \"+convert(p0)+\" boolean \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getBestProvider", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.location.LocationManager->getBestProvider", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["android.location.Criteria", "boolean"], "signature": "redir_android_location_LocationManager_getBestProvider_106(Object _this , android.location.Criteria p0, boolean p1)", "returnType": "java.lang.String", "jniSignature": "Landroid/location/LocationManager;->getBestProvider(Landroid/location/Criteria;Z)Ljava/lang/String;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (java.lang.String) monitorHook.hookAfterApiCall(logSignature, (java.lang.String) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: getLastKnownLocation retCls: android.location.Location params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getLastKnownLocation", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.location.LocationManager->getLastKnownLocation", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_location_LocationManager_getLastKnownLocation_107(Object _this , java.lang.String p0)", "returnType": "android.location.Location", "jniSignature": "Landroid/location/LocationManager;->getLastKnownLocation(Ljava/lang/String;)Landroid/location/Location;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (android.location.Location) monitorHook.hookAfterApiCall(logSignature, (android.location.Location) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: getProvider retCls: android.location.LocationProvider params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getProvider", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.location.LocationManager->getProvider", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_location_LocationManager_getProvider_108(Object _this , java.lang.String p0)", "returnType": "android.location.LocationProvider", "jniSignature": "Landroid/location/LocationManager;->getProvider(Ljava/lang/String;)Landroid/location/LocationProvider;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (android.location.LocationProvider) monitorHook.hookAfterApiCall(logSignature, (android.location.LocationProvider) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: getProviders retCls: java.util.List params: android.location.Criteria \"+convert(p0)+\" boolean \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getProviders", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.location.LocationManager->getProviders", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["android.location.Criteria", "boolean"], "signature": "redir_android_location_LocationManager_getProviders_109(Object _this , android.location.Criteria p0, boolean p1)", "returnType": "java.util.List", "jniSignature": "Landroid/location/LocationManager;->getProviders(Landroid/location/Criteria;Z)Ljava/util/List;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (java.util.List) monitorHook.hookAfterApiCall(logSignature, (java.util.List) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: getProviders retCls: java.util.List params: boolean \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getProviders", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.location.LocationManager->getProviders", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["boolean"], "signature": "redir_android_location_LocationManager_getProviders_110(Object _this , boolean p0)", "returnType": "java.util.List", "jniSignature": "Landroid/location/LocationManager;->getProviders(Z)Ljava/util/List;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (java.util.List) monitorHook.hookAfterApiCall(logSignature, (java.util.List) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: isProviderEnabled retCls: boolean params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "isProviderEnabled", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.location.LocationManager->isProviderEnabled", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_location_LocationManager_isProviderEnabled_111(Object _this , java.lang.String p0)", "returnType": "boolean", "jniSignature": "Landroid/location/LocationManager;->isProviderEnabled(Ljava/lang/String;)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: removeTestProvider retCls: void params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "removeTestProvider", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->removeTestProvider", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_location_LocationManager_removeTestProvider_112(Object _this , java.lang.String p0)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->removeTestProvider(Ljava/lang/String;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: requestLocationUpdates retCls: void params: long \"+convert(p0)+\" float \"+convert(p1)+\" android.location.Criteria \"+convert(p2)+\" android.app.PendingIntent \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestLocationUpdates", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->requestLocationUpdates", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["long", "float", "android.location.Criteria", "android.app.PendingIntent"], "signature": "redir_android_location_LocationManager_requestLocationUpdates_113(Object _this , long p0, float p1, android.location.Criteria p2, android.app.PendingIntent p3)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->requestLocationUpdates(JFLandroid/location/Criteria;Landroid/app/PendingIntent;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: requestLocationUpdates retCls: void params: long \"+convert(p0)+\" float \"+convert(p1)+\" android.location.Criteria \"+convert(p2)+\" android.location.LocationListener \"+convert(p3)+\" android.os.Looper \"+convert(p4)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestLocationUpdates", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->requestLocationUpdates", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["long", "float", "android.location.Criteria", "android.location.LocationListener", "android.os.Looper"], "signature": "redir_android_location_LocationManager_requestLocationUpdates_114(Object _this , long p0, float p1, android.location.Criteria p2, android.location.LocationListener p3, android.os.Looper p4)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->requestLocationUpdates(JFLandroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: requestLocationUpdates retCls: void params: java.lang.String \"+convert(p0)+\" long \"+convert(p1)+\" float \"+convert(p2)+\" android.app.PendingIntent \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestLocationUpdates", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->requestLocationUpdates", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "long", "float", "android.app.PendingIntent"], "signature": "redir_android_location_LocationManager_requestLocationUpdates_115(Object _this , java.lang.String p0, long p1, float p2, android.app.PendingIntent p3)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->requestLocationUpdates(Ljava/lang/String;JFLandroid/app/PendingIntent;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: requestLocationUpdates retCls: void params: java.lang.String \"+convert(p0)+\" long \"+convert(p1)+\" float \"+convert(p2)+\" android.location.LocationListener \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestLocationUpdates", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->requestLocationUpdates", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "long", "float", "android.location.LocationListener"], "signature": "redir_android_location_LocationManager_requestLocationUpdates_116(Object _this , java.lang.String p0, long p1, float p2, android.location.LocationListener p3)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: requestLocationUpdates retCls: void params: java.lang.String \"+convert(p0)+\" long \"+convert(p1)+\" float \"+convert(p2)+\" android.location.LocationListener \"+convert(p3)+\" android.os.Looper \"+convert(p4)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestLocationUpdates", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->requestLocationUpdates", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "long", "float", "android.location.LocationListener", "android.os.Looper"], "signature": "redir_android_location_LocationManager_requestLocationUpdates_117(Object _this , java.lang.String p0, long p1, float p2, android.location.LocationListener p3, android.os.Looper p4)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->requestLocationUpdates(Ljava/lang/String;JFLandroid/location/LocationListener;Landroid/os/Looper;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: requestSingleUpdate retCls: void params: android.location.Criteria \"+convert(p0)+\" android.app.PendingIntent \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestSingleUpdate", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->requestSingleUpdate", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["android.location.Criteria", "android.app.PendingIntent"], "signature": "redir_android_location_LocationManager_requestSingleUpdate_118(Object _this , android.location.Criteria p0, android.app.PendingIntent p1)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->requestSingleUpdate(Landroid/location/Criteria;Landroid/app/PendingIntent;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: requestSingleUpdate retCls: void params: android.location.Criteria \"+convert(p0)+\" android.location.LocationListener \"+convert(p1)+\" android.os.Looper \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestSingleUpdate", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->requestSingleUpdate", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["android.location.Criteria", "android.location.LocationListener", "android.os.Looper"], "signature": "redir_android_location_LocationManager_requestSingleUpdate_119(Object _this , android.location.Criteria p0, android.location.LocationListener p1, android.os.Looper p2)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->requestSingleUpdate(Landroid/location/Criteria;Landroid/location/LocationListener;Landroid/os/Looper;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: requestSingleUpdate retCls: void params: java.lang.String \"+convert(p0)+\" android.app.PendingIntent \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestSingleUpdate", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->requestSingleUpdate", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "android.app.PendingIntent"], "signature": "redir_android_location_LocationManager_requestSingleUpdate_120(Object _this , java.lang.String p0, android.app.PendingIntent p1)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->requestSingleUpdate(Ljava/lang/String;Landroid/app/PendingIntent;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: requestSingleUpdate retCls: void params: java.lang.String \"+convert(p0)+\" android.location.LocationListener \"+convert(p1)+\" android.os.Looper \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestSingleUpdate", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->requestSingleUpdate", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "android.location.LocationListener", "android.os.Looper"], "signature": "redir_android_location_LocationManager_requestSingleUpdate_121(Object _this , java.lang.String p0, android.location.LocationListener p1, android.os.Looper p2)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->requestSingleUpdate(Ljava/lang/String;Landroid/location/LocationListener;Landroid/os/Looper;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: sendExtraCommand retCls: boolean params: java.lang.String \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" android.os.Bundle \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "sendExtraCommand", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.location.LocationManager->sendExtraCommand", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "java.lang.String", "android.os.Bundle"], "signature": "redir_android_location_LocationManager_sendExtraCommand_122(Object _this , java.lang.String p0, java.lang.String p1, android.os.Bundle p2)", "returnType": "boolean", "jniSignature": "Landroid/location/LocationManager;->sendExtraCommand(Ljava/lang/String;Ljava/lang/String;Landroid/os/Bundle;)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: setTestProviderEnabled retCls: void params: java.lang.String \"+convert(p0)+\" boolean \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setTestProviderEnabled", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->setTestProviderEnabled", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "boolean"], "signature": "redir_android_location_LocationManager_setTestProviderEnabled_123(Object _this , java.lang.String p0, boolean p1)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->setTestProviderEnabled(Ljava/lang/String;Z)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: setTestProviderLocation retCls: void params: java.lang.String \"+convert(p0)+\" android.location.Location \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setTestProviderLocation", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->setTestProviderLocation", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "android.location.Location"], "signature": "redir_android_location_LocationManager_setTestProviderLocation_124(Object _this , java.lang.String p0, android.location.Location p1)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->setTestProviderLocation(Ljava/lang/String;Landroid/location/Location;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.location.LocationManager mthd: setTestProviderStatus retCls: void params: java.lang.String \"+convert(p0)+\" int \"+convert(p1)+\" android.os.Bundle \"+convert(p2)+\" long \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setTestProviderStatus", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.location.LocationManager->setTestProviderStatus", "className": "android.location.LocationManager", "platformVersion": "All", "paramList": ["java.lang.String", "int", "android.os.Bundle", "long"], "signature": "redir_android_location_LocationManager_setTestProviderStatus_125(Object _this , java.lang.String p0, int p1, android.os.Bundle p2, long p3)", "returnType": "void", "jniSignature": "Landroid/location/LocationManager;->setTestProviderStatus(Ljava/lang/String;ILandroid/os/Bundle;J)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: isBluetoothA2dpOn retCls: boolean params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "isBluetoothA2dpOn", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.media.AudioManager->isBluetoothA2dpOn", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_media_AudioManager_isBluetoothA2dpOn_126(Object _this )", "returnType": "boolean", "jniSignature": "Landroid/media/AudioManager;->isBluetoothA2dpOn()Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: isWiredHeadsetOn retCls: boolean params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "isWiredHeadsetOn", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.media.AudioManager->isWiredHeadsetOn", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_media_AudioManager_isWiredHeadsetOn_127(Object _this )", "returnType": "boolean", "jniSignature": "Landroid/media/AudioManager;->isWiredHeadsetOn()Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: setBluetoothScoOn retCls: void params: boolean \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setBluetoothScoOn", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.AudioManager->setBluetoothScoOn", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": ["boolean"], "signature": "redir_android_media_AudioManager_setBluetoothScoOn_128(Object _this , boolean p0)", "returnType": "void", "jniSignature": "Landroid/media/AudioManager;->setBluetoothScoOn(Z)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: setMicrophoneMute retCls: void params: boolean \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setMicrophoneMute", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.AudioManager->setMicrophoneMute", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": ["boolean"], "signature": "redir_android_media_AudioManager_setMicrophoneMute_129(Object _this , boolean p0)", "returnType": "void", "jniSignature": "Landroid/media/AudioManager;->setMicrophoneMute(Z)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: setMode retCls: void params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setMode", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.AudioManager->setMode", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": ["int"], "signature": "redir_android_media_AudioManager_setMode_130(Object _this , int p0)", "returnType": "void", "jniSignature": "Landroid/media/AudioManager;->setMode(I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: setParameter retCls: void params: java.lang.String \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setParameter", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.AudioManager->setParameter", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": ["java.lang.String", "java.lang.String"], "signature": "redir_android_media_AudioManager_setParameter_131(Object _this , java.lang.String p0, java.lang.String p1)", "returnType": "void", "jniSignature": "Landroid/media/AudioManager;->setParameter(Ljava/lang/String;Ljava/lang/String;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: setParameters retCls: void params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setParameters", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.AudioManager->setParameters", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_media_AudioManager_setParameters_132(Object _this , java.lang.String p0)", "returnType": "void", "jniSignature": "Landroid/media/AudioManager;->setParameters(Ljava/lang/String;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: setSpeakerphoneOn retCls: void params: boolean \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setSpeakerphoneOn", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.AudioManager->setSpeakerphoneOn", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": ["boolean"], "signature": "redir_android_media_AudioManager_setSpeakerphoneOn_133(Object _this , boolean p0)", "returnType": "void", "jniSignature": "Landroid/media/AudioManager;->setSpeakerphoneOn(Z)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: startBluetoothSco retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "startBluetoothSco", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.AudioManager->startBluetoothSco", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_media_AudioManager_startBluetoothSco_134(Object _this )", "returnType": "void", "jniSignature": "Landroid/media/AudioManager;->startBluetoothSco()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioManager mthd: stopBluetoothSco retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "stopBluetoothSco", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.AudioManager->stopBluetoothSco", "className": "android.media.AudioManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_media_AudioManager_stopBluetoothSco_135(Object _this )", "returnType": "void", "jniSignature": "Landroid/media/AudioManager;->stopBluetoothSco()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.AudioRecord mthd: <init> retCls: void params: int \"+convert(p0)+\" int \"+convert(p1)+\" int \"+convert(p2)+\" int \"+convert(p3)+\" int \"+convert(p4)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.AudioRecord-><init>", "className": "android.media.AudioRecord", "platformVersion": "All", "paramList": ["int", "int", "int", "int", "int"], "signature": "redir_android_media_AudioRecord__ctor_136(Object _this , int p0, int p1, int p2, int p3, int p4)", "returnType": "void", "jniSignature": "Landroid/media/AudioRecord;-><init>(IIIII)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.MediaPlayer mthd: setWakeMode retCls: void params: android.content.Context \"+convert(p0)+\" int \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setWakeMode", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.MediaPlayer->setWakeMode", "className": "android.media.MediaPlayer", "platformVersion": "All", "paramList": ["android.content.Context", "int"], "signature": "redir_android_media_MediaPlayer_setWakeMode_137(Object _this , android.content.Context p0, int p1)", "returnType": "void", "jniSignature": "Landroid/media/MediaPlayer;->setWakeMode(Landroid/content/Context;I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.MediaRecorder mthd: setAudioSource retCls: void params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setAudioSource", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.MediaRecorder->setAudioSource", "className": "android.media.MediaRecorder", "platformVersion": "All", "paramList": ["int"], "signature": "redir_android_media_MediaRecorder_setAudioSource_138(Object _this , int p0)", "returnType": "void", "jniSignature": "Landroid/media/MediaRecorder;->setAudioSource(I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.media.MediaRecorder mthd: setVideoSource retCls: void params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setVideoSource", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.media.MediaRecorder->setVideoSource", "className": "android.media.MediaRecorder", "platformVersion": "All", "paramList": ["int"], "signature": "redir_android_media_MediaRecorder_setVideoSource_139(Object _this , int p0)", "returnType": "void", "jniSignature": "Landroid/media/MediaRecorder;->setVideoSource(I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.ConnectivityManager mthd: requestRouteToHost retCls: boolean params: int \"+convert(p0)+\" int \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "requestRouteToHost", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.ConnectivityManager->requestRouteToHost", "className": "android.net.ConnectivityManager", "platformVersion": "All", "paramList": ["int", "int"], "signature": "redir_android_net_ConnectivityManager_requestRouteToHost_140(Object _this , int p0, int p1)", "returnType": "boolean", "jniSignature": "Landroid/net/ConnectivityManager;->requestRouteToHost(II)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.ConnectivityManager mthd: setNetworkPreference retCls: void params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setNetworkPreference", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.net.ConnectivityManager->setNetworkPreference", "className": "android.net.ConnectivityManager", "platformVersion": "All", "paramList": ["int"], "signature": "redir_android_net_ConnectivityManager_setNetworkPreference_148(Object _this , int p0)", "returnType": "void", "jniSignature": "Landroid/net/ConnectivityManager;->setNetworkPreference(I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.ConnectivityManager mthd: startUsingNetworkFeature retCls: int params: int \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "startUsingNetworkFeature", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.net.ConnectivityManager->startUsingNetworkFeature", "className": "android.net.ConnectivityManager", "platformVersion": "All", "paramList": ["int", "java.lang.String"], "signature": "redir_android_net_ConnectivityManager_startUsingNetworkFeature_180(Object _this , int p0, java.lang.String p1)", "returnType": "int", "jniSignature": "Landroid/net/ConnectivityManager;->startUsingNetworkFeature(ILjava/lang/String;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.ConnectivityManager mthd: stopUsingNetworkFeature retCls: int params: int \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "stopUsingNetworkFeature", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.net.ConnectivityManager->stopUsingNetworkFeature", "className": "android.net.ConnectivityManager", "platformVersion": "All", "paramList": ["int", "java.lang.String"], "signature": "redir_android_net_ConnectivityManager_stopUsingNetworkFeature_181(Object _this , int p0, java.lang.String p1)", "returnType": "int", "jniSignature": "Landroid/net/ConnectivityManager;->stopUsingNetworkFeature(ILjava/lang/String;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.ConnectivityManager mthd: tether retCls: int params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "tether", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.net.ConnectivityManager->tether", "className": "android.net.ConnectivityManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_net_ConnectivityManager_tether_182(Object _this , java.lang.String p0)", "returnType": "int", "jniSignature": "Landroid/net/ConnectivityManager;->tether(Ljava/lang/String;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.ConnectivityManager mthd: untether retCls: int params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "untether", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.net.ConnectivityManager->untether", "className": "android.net.ConnectivityManager", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_net_ConnectivityManager_untether_183(Object _this , java.lang.String p0)", "returnType": "int", "jniSignature": "Landroid/net/ConnectivityManager;->untether(Ljava/lang/String;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager$MulticastLock mthd: acquire retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "acquire", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager$MulticastLock->acquire", "className": "android.net.wifi.WifiManager$MulticastLock", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager$MulticastLock_acquire_206(Object _this )", "returnType": "void", "jniSignature": "Landroid/net/wifi/WifiManager$MulticastLock;->acquire()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager$MulticastLock mthd: release retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "release", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager$MulticastLock->release", "className": "android.net.wifi.WifiManager$MulticastLock", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager$MulticastLock_release_207(Object _this )", "returnType": "void", "jniSignature": "Landroid/net/wifi/WifiManager$MulticastLock;->release()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager$WifiLock mthd: acquire retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "acquire", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager$WifiLock->acquire", "className": "android.net.wifi.WifiManager$WifiLock", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager$WifiLock_acquire_208(Object _this )", "returnType": "void", "jniSignature": "Landroid/net/wifi/WifiManager$WifiLock;->acquire()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager$WifiLock mthd: release retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "release", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager$WifiLock->release", "className": "android.net.wifi.WifiManager$WifiLock", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager$WifiLock_release_209(Object _this )", "returnType": "void", "jniSignature": "Landroid/net/wifi/WifiManager$WifiLock;->release()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: addNetwork retCls: int params: android.net.wifi.WifiConfiguration \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "addNetwork", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->addNetwork", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": ["android.net.wifi.WifiConfiguration"], "signature": "redir_android_net_wifi_WifiManager_addNetwork_210(Object _this , android.net.wifi.WifiConfiguration p0)", "returnType": "int", "jniSignature": "Landroid/net/wifi/WifiManager;->addNetwork(Landroid/net/wifi/WifiConfiguration;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: disableNetwork retCls: boolean params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "disableNetwork", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->disableNetwork", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": ["int"], "signature": "redir_android_net_wifi_WifiManager_disableNetwork_211(Object _this , int p0)", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->disableNetwork(I)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: disconnect retCls: boolean params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "disconnect", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->disconnect", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager_disconnect_212(Object _this )", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->disconnect()Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: enableNetwork retCls: boolean params: int \"+convert(p0)+\" boolean \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "enableNetwork", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->enableNetwork", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": ["int", "boolean"], "signature": "redir_android_net_wifi_WifiManager_enableNetwork_213(Object _this , int p0, boolean p1)", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->enableNetwork(IZ)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: initializeMulticastFiltering retCls: boolean params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "initializeMulticastFiltering", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->initializeMulticastFiltering", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager_initializeMulticastFiltering_214(Object _this )", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->initializeMulticastFiltering()Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: pingSupplicant retCls: boolean params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "pingSupplicant", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->pingSupplicant", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager_pingSupplicant_215(Object _this )", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->pingSupplicant()Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: reassociate retCls: boolean params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "reassociate", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->reassociate", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager_reassociate_216(Object _this )", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->reassociate()Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: reconnect retCls: boolean params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "reconnect", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->reconnect", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager_reconnect_217(Object _this )", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->reconnect()Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: removeNetwork retCls: boolean params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "removeNetwork", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->removeNetwork", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": ["int"], "signature": "redir_android_net_wifi_WifiManager_removeNetwork_218(Object _this , int p0)", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->removeNetwork(I)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: saveConfiguration retCls: boolean params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "saveConfiguration", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->saveConfiguration", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager_saveConfiguration_219(Object _this )", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->saveConfiguration()Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: setWifiApEnabled retCls: boolean params: android.net.wifi.WifiConfiguration \"+convert(p0)+\" boolean \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setWifiApEnabled", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->setWifiApEnabled", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": ["android.net.wifi.WifiConfiguration", "boolean"], "signature": "redir_android_net_wifi_WifiManager_setWifiApEnabled_220(Object _this , android.net.wifi.WifiConfiguration p0, boolean p1)", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->setWifiApEnabled(Landroid/net/wifi/WifiConfiguration;Z)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: setWifiEnabled retCls: boolean params: boolean \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "setWifiEnabled", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->setWifiEnabled", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": ["boolean"], "signature": "redir_android_net_wifi_WifiManager_setWifiEnabled_221(Object _this , boolean p0)", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->setWifiEnabled(Z)Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.net.wifi.WifiManager mthd: startScan retCls: boolean params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "startScan", "defaultReturnValue": "false", "policy": "Allow", "hookedMethod": "android.net.wifi.WifiManager->startScan", "className": "android.net.wifi.WifiManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_net_wifi_WifiManager_startScan_222(Object _this )", "returnType": "boolean", "jniSignature": "Landroid/net/wifi/WifiManager;->startScan()Z", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (Boolean) monitorHook.hookAfterApiCall(logSignature, (Boolean) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.os.PowerManager$WakeLock mthd: acquire retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "acquire", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.os.PowerManager$WakeLock->acquire", "className": "android.os.PowerManager$WakeLock", "platformVersion": "All", "paramList": [], "signature": "redir_android_os_PowerManager$WakeLock_acquire_232(Object _this )", "returnType": "void", "jniSignature": "Landroid/os/PowerManager$WakeLock;->acquire()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.os.PowerManager$WakeLock mthd: acquire retCls: void params: long \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "acquire", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.os.PowerManager$WakeLock->acquire", "className": "android.os.PowerManager$WakeLock", "platformVersion": "All", "paramList": ["long"], "signature": "redir_android_os_PowerManager$WakeLock_acquire_233(Object _this , long p0)", "returnType": "void", "jniSignature": "Landroid/os/PowerManager$WakeLock;->acquire(J)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.os.PowerManager$WakeLock mthd: release retCls: void params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "release", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.os.PowerManager$WakeLock->release", "className": "android.os.PowerManager$WakeLock", "platformVersion": "All", "paramList": ["int"], "signature": "redir_android_os_PowerManager$WakeLock_release_239(Object _this , int p0)", "returnType": "void", "jniSignature": "Landroid/os/PowerManager$WakeLock;->release(I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.speech.SpeechRecognizer mthd: cancel retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "cancel", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.speech.SpeechRecognizer->cancel", "className": "android.speech.SpeechRecognizer", "platformVersion": "All", "paramList": [], "signature": "redir_android_speech_SpeechRecognizer_cancel_250(Object _this )", "returnType": "void", "jniSignature": "Landroid/speech/SpeechRecognizer;->cancel()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.speech.SpeechRecognizer mthd: handleCancelMessage retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "handleCancelMessage", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.speech.SpeechRecognizer->handleCancelMessage", "className": "android.speech.SpeechRecognizer", "platformVersion": "All", "paramList": [], "signature": "redir_android_speech_SpeechRecognizer_handleCancelMessage_251(Object _this )", "returnType": "void", "jniSignature": "Landroid/speech/SpeechRecognizer;->handleCancelMessage()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.speech.SpeechRecognizer mthd: handleStartListening retCls: void params: android.content.Intent \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "handleStartListening", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.speech.SpeechRecognizer->handleStartListening", "className": "android.speech.SpeechRecognizer", "platformVersion": "All", "paramList": ["android.content.Intent"], "signature": "redir_android_speech_SpeechRecognizer_handleStartListening_252(Object _this , android.content.Intent p0)", "returnType": "void", "jniSignature": "Landroid/speech/SpeechRecognizer;->handleStartListening(Landroid/content/Intent;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.speech.SpeechRecognizer mthd: handleStopMessage retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "handleStopMessage", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.speech.SpeechRecognizer->handleStopMessage", "className": "android.speech.SpeechRecognizer", "platformVersion": "All", "paramList": [], "signature": "redir_android_speech_SpeechRecognizer_handleStopMessage_253(Object _this )", "returnType": "void", "jniSignature": "Landroid/speech/SpeechRecognizer;->handleStopMessage()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.speech.SpeechRecognizer mthd: startListening retCls: void params: android.content.Intent \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "startListening", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.speech.SpeechRecognizer->startListening", "className": "android.speech.SpeechRecognizer", "platformVersion": "All", "paramList": ["android.content.Intent"], "signature": "redir_android_speech_SpeechRecognizer_startListening_254(Object _this , android.content.Intent p0)", "returnType": "void", "jniSignature": "Landroid/speech/SpeechRecognizer;->startListening(Landroid/content/Intent;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.speech.SpeechRecognizer mthd: stopListening retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "stopListening", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.speech.SpeechRecognizer->stopListening", "className": "android.speech.SpeechRecognizer", "platformVersion": "All", "paramList": [], "signature": "redir_android_speech_SpeechRecognizer_stopListening_255(Object _this )", "returnType": "void", "jniSignature": "Landroid/speech/SpeechRecognizer;->stopListening()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: getCellLocation retCls: android.telephony.CellLocation params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getCellLocation", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->getCellLocation", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_telephony_TelephonyManager_getCellLocation_291(Object _this )", "returnType": "android.telephony.CellLocation", "jniSignature": "Landroid/telephony/TelephonyManager;->getCellLocation()Landroid/telephony/CellLocation;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (android.telephony.CellLocation) monitorHook.hookAfterApiCall(logSignature, (android.telephony.CellLocation) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: getDeviceId retCls: java.lang.String params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getDeviceId", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->getDeviceId", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_telephony_TelephonyManager_getDeviceId_292(Object _this )", "returnType": "java.lang.String", "jniSignature": "Landroid/telephony/TelephonyManager;->getDeviceId()Ljava/lang/String;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (java.lang.String) monitorHook.hookAfterApiCall(logSignature, (java.lang.String) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: getDeviceSoftwareVersion retCls: java.lang.String params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getDeviceSoftwareVersion", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->getDeviceSoftwareVersion", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_telephony_TelephonyManager_getDeviceSoftwareVersion_293(Object _this )", "returnType": "java.lang.String", "jniSignature": "Landroid/telephony/TelephonyManager;->getDeviceSoftwareVersion()Ljava/lang/String;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (java.lang.String) monitorHook.hookAfterApiCall(logSignature, (java.lang.String) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: getLine1Number retCls: java.lang.String params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getLine1Number", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->getLine1Number", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_telephony_TelephonyManager_getLine1Number_294(Object _this )", "returnType": "java.lang.String", "jniSignature": "Landroid/telephony/TelephonyManager;->getLine1Number()Ljava/lang/String;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (java.lang.String) monitorHook.hookAfterApiCall(logSignature, (java.lang.String) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: getNeighboringCellInfo retCls: java.util.List params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getNeighboringCellInfo", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->getNeighboringCellInfo", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_telephony_TelephonyManager_getNeighboringCellInfo_295(Object _this )", "returnType": "java.util.List", "jniSignature": "Landroid/telephony/TelephonyManager;->getNeighboringCellInfo()Ljava/util/List;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (java.util.List) monitorHook.hookAfterApiCall(logSignature, (java.util.List) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: getSimSerialNumber retCls: java.lang.String params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getSimSerialNumber", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->getSimSerialNumber", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_telephony_TelephonyManager_getSimSerialNumber_296(Object _this )", "returnType": "java.lang.String", "jniSignature": "Landroid/telephony/TelephonyManager;->getSimSerialNumber()Ljava/lang/String;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (java.lang.String) monitorHook.hookAfterApiCall(logSignature, (java.lang.String) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: getSubscriberId retCls: java.lang.String params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getSubscriberId", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->getSubscriberId", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_telephony_TelephonyManager_getSubscriberId_297(Object _this )", "returnType": "java.lang.String", "jniSignature": "Landroid/telephony/TelephonyManager;->getSubscriberId()Ljava/lang/String;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (java.lang.String) monitorHook.hookAfterApiCall(logSignature, (java.lang.String) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: getVoiceMailAlphaTag retCls: java.lang.String params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getVoiceMailAlphaTag", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->getVoiceMailAlphaTag", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_telephony_TelephonyManager_getVoiceMailAlphaTag_298(Object _this )", "returnType": "java.lang.String", "jniSignature": "Landroid/telephony/TelephonyManager;->getVoiceMailAlphaTag()Ljava/lang/String;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (java.lang.String) monitorHook.hookAfterApiCall(logSignature, (java.lang.String) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: getVoiceMailNumber retCls: java.lang.String params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "getVoiceMailNumber", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->getVoiceMailNumber", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": [], "signature": "redir_android_telephony_TelephonyManager_getVoiceMailNumber_299(Object _this )", "returnType": "java.lang.String", "jniSignature": "Landroid/telephony/TelephonyManager;->getVoiceMailNumber()Ljava/lang/String;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (java.lang.String) monitorHook.hookAfterApiCall(logSignature, (java.lang.String) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.TelephonyManager mthd: listen retCls: void params: android.telephony.PhoneStateListener \"+convert(p0)+\" int \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "listen", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.telephony.TelephonyManager->listen", "className": "android.telephony.TelephonyManager", "platformVersion": "All", "paramList": ["android.telephony.PhoneStateListener", "int"], "signature": "redir_android_telephony_TelephonyManager_listen_300(Object _this , android.telephony.PhoneStateListener p0, int p1)", "returnType": "void", "jniSignature": "Landroid/telephony/TelephonyManager;->listen(Landroid/telephony/PhoneStateListener;I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.webkit.WebView mthd: loadDataWithBaseURL retCls: void params: java.lang.String \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" java.lang.String \"+convert(p2)+\" java.lang.String \"+convert(p3)+\" java.lang.String \"+convert(p4)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "loadDataWithBaseURL", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.webkit.WebView->loadDataWithBaseURL", "className": "android.webkit.WebView", "platformVersion": "All", "paramList": ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], "signature": "redir_android_webkit_WebView_loadDataWithBaseURL_336(Object _this , java.lang.String p0, java.lang.String p1, java.lang.String p2, java.lang.String p3, java.lang.String p4)", "returnType": "void", "jniSignature": "Landroid/webkit/WebView;->loadDataWithBaseURL(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.webkit.WebView mthd: loadUrl retCls: void params: java.lang.String \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "loadUrl", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.webkit.WebView->loadUrl", "className": "android.webkit.WebView", "platformVersion": "All", "paramList": ["java.lang.String"], "signature": "redir_android_webkit_WebView_loadUrl_337(Object _this , java.lang.String p0)", "returnType": "void", "jniSignature": "Landroid/webkit/WebView;->loadUrl(Ljava/lang/String;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.webkit.WebView mthd: loadUrl retCls: void params: java.lang.String \"+convert(p0)+\" java.util.Map \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "loadUrl", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.webkit.WebView->loadUrl", "className": "android.webkit.WebView", "platformVersion": "All", "paramList": ["java.lang.String", "java.util.Map"], "signature": "redir_android_webkit_WebView_loadUrl_338(Object _this , java.lang.String p0, java.util.Map p1)", "returnType": "void", "jniSignature": "Landroid/webkit/WebView;->loadUrl(Ljava/lang/String;Ljava/util/Map;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.telephony.SmsManager mthd: sendTextMessage retCls: void params: java.lang.String \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" java.lang.String \"+convert(p2)+\" android.app.PendingIntent \"+convert(p3)+\" android.app.PendingIntent \"+convert(p4)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "sendTextMessage", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.telephony.SmsManager->sendTextMessage", "className": "android.telephony.SmsManager", "platformVersion": "All", "paramList": ["java.lang.String", "java.lang.String", "java.lang.String", "android.app.PendingIntent", "android.app.PendingIntent"], "signature": "redir_android_telephony_SmsManager_sendTextMessage_343(Object _this , java.lang.String p0, java.lang.String p1, java.lang.String p2, android.app.PendingIntent p3, android.app.PendingIntent p4)", "returnType": "void", "jniSignature": "Landroid/telephony/SmsManager;->sendTextMessage(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/app/PendingIntent;Landroid/app/PendingIntent;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.Socket mthd: <init> retCls: void params: java.net.Proxy \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.Socket-><init>", "className": "java.net.Socket", "platformVersion": "All", "paramList": ["java.net.Proxy"], "signature": "redir_java_net_Socket__ctor_384(Object _this , java.net.Proxy p0)", "returnType": "void", "jniSignature": "Ljava/net/Socket;-><init>(Ljava/net/Proxy;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.Socket mthd: <init> retCls: void params: java.lang.String \"+convert(p0)+\" int \"+convert(p1)+\" java.net.InetAddress \"+convert(p2)+\" int \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.Socket-><init>", "className": "java.net.Socket", "platformVersion": "All", "paramList": ["java.lang.String", "int", "java.net.InetAddress", "int"], "signature": "redir_java_net_Socket__ctor_390(Object _this , java.lang.String p0, int p1, java.net.InetAddress p2, int p3)", "returnType": "void", "jniSignature": "Ljava/net/Socket;-><init>(Ljava/lang/String;ILjava/net/InetAddress;I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.Socket mthd: <init> retCls: void params: java.lang.String \"+convert(p0)+\" int \"+convert(p1)+\" boolean \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.Socket-><init>", "className": "java.net.Socket", "platformVersion": "All", "paramList": ["java.lang.String", "int", "boolean"], "signature": "redir_java_net_Socket__ctor_393(Object _this , java.lang.String p0, int p1, boolean p2)", "returnType": "void", "jniSignature": "Ljava/net/Socket;-><init>(Ljava/lang/String;IZ)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.Socket mthd: <init> retCls: void params: java.net.InetAddress \"+convert(p0)+\" int \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.Socket-><init>", "className": "java.net.Socket", "platformVersion": "All", "paramList": ["java.net.InetAddress", "int"], "signature": "redir_java_net_Socket__ctor_396(Object _this , java.net.InetAddress p0, int p1)", "returnType": "void", "jniSignature": "Ljava/net/Socket;-><init>(Ljava/net/InetAddress;I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.Socket mthd: <init> retCls: void params: java.net.InetAddress \"+convert(p0)+\" int \"+convert(p1)+\" java.net.InetAddress \"+convert(p2)+\" int \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.Socket-><init>", "className": "java.net.Socket", "platformVersion": "All", "paramList": ["java.net.InetAddress", "int", "java.net.InetAddress", "int"], "signature": "redir_java_net_Socket__ctor_399(Object _this , java.net.InetAddress p0, int p1, java.net.InetAddress p2, int p3)", "returnType": "void", "jniSignature": "Ljava/net/Socket;-><init>(Ljava/net/InetAddress;ILjava/net/InetAddress;I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.Socket mthd: <init> retCls: void params: java.net.InetAddress \"+convert(p0)+\" int \"+convert(p1)+\" boolean \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.Socket-><init>", "className": "java.net.Socket", "platformVersion": "All", "paramList": ["java.net.InetAddress", "int", "boolean"], "signature": "redir_java_net_Socket__ctor_402(Object _this , java.net.InetAddress p0, int p1, boolean p2)", "returnType": "void", "jniSignature": "Ljava/net/Socket;-><init>(Ljava/net/InetAddress;IZ)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.Socket mthd: connect retCls: void params: java.net.SocketAddress \"+convert(p0)+\" int \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "connect", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.Socket->connect", "className": "java.net.Socket", "platformVersion": "All", "paramList": ["java.net.SocketAddress", "int"], "signature": "redir_java_net_Socket_connect_412(Object _this , java.net.SocketAddress p0, int p1)", "returnType": "void", "jniSignature": "Ljava/net/Socket;->connect(Ljava/net/SocketAddress;I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.DatagramSocket mthd: <init> retCls: void params: int \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.DatagramSocket-><init>", "className": "java.net.DatagramSocket", "platformVersion": "All", "paramList": ["int"], "signature": "redir_java_net_DatagramSocket__ctor_417(Object _this , int p0)", "returnType": "void", "jniSignature": "Ljava/net/DatagramSocket;-><init>(I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.DatagramSocket mthd: <init> retCls: void params: int \"+convert(p0)+\" java.net.InetAddress \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.DatagramSocket-><init>", "className": "java.net.DatagramSocket", "platformVersion": "All", "paramList": ["int", "java.net.InetAddress"], "signature": "redir_java_net_DatagramSocket__ctor_420(Object _this , int p0, java.net.InetAddress p1)", "returnType": "void", "jniSignature": "Ljava/net/DatagramSocket;-><init>(ILjava/net/InetAddress;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.DatagramSocket mthd: <init> retCls: void params: java.net.SocketAddress \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.DatagramSocket-><init>", "className": "java.net.DatagramSocket", "platformVersion": "All", "paramList": ["java.net.SocketAddress"], "signature": "redir_java_net_DatagramSocket__ctor_422(Object _this , java.net.SocketAddress p0)", "returnType": "void", "jniSignature": "Ljava/net/DatagramSocket;-><init>(Ljava/net/SocketAddress;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.DatagramSocket mthd: connect retCls: void params: java.net.SocketAddress \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "connect", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.DatagramSocket->connect", "className": "java.net.DatagramSocket", "platformVersion": "All", "paramList": ["java.net.SocketAddress"], "signature": "redir_java_net_DatagramSocket_connect_428(Object _this , java.net.SocketAddress p0)", "returnType": "void", "jniSignature": "Ljava/net/DatagramSocket;->connect(Ljava/net/SocketAddress;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.MulticastSocket mthd: joinGroup retCls: void params: java.net.InetAddress \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "joinGroup", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.MulticastSocket->joinGroup", "className": "java.net.MulticastSocket", "platformVersion": "All", "paramList": ["java.net.InetAddress"], "signature": "redir_java_net_MulticastSocket_joinGroup_440(Object _this , java.net.InetAddress p0)", "returnType": "void", "jniSignature": "Ljava/net/MulticastSocket;->joinGroup(Ljava/net/InetAddress;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.MulticastSocket mthd: joinGroup retCls: void params: java.net.SocketAddress \"+convert(p0)+\" java.net.NetworkInterface \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "joinGroup", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.MulticastSocket->joinGroup", "className": "java.net.MulticastSocket", "platformVersion": "All", "paramList": ["java.net.SocketAddress", "java.net.NetworkInterface"], "signature": "redir_java_net_MulticastSocket_joinGroup_441(Object _this , java.net.SocketAddress p0, java.net.NetworkInterface p1)", "returnType": "void", "jniSignature": "Ljava/net/MulticastSocket;->joinGroup(Ljava/net/SocketAddress;Ljava/net/NetworkInterface;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.URL mthd: <init> retCls: void params: java.net.URL \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" java.net.URLStreamHandler \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.URL-><init>", "className": "java.net.URL", "platformVersion": "All", "paramList": ["java.net.URL", "java.lang.String", "java.net.URLStreamHandler"], "signature": "redir_java_net_URL__ctor_454(Object _this , java.net.URL p0, java.lang.String p1, java.net.URLStreamHandler p2)", "returnType": "void", "jniSignature": "Ljava/net/URL;-><init>(Ljava/net/URL;Ljava/lang/String;Ljava/net/URLStreamHandler;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.URL mthd: <init> retCls: void params: java.lang.String \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" int \"+convert(p2)+\" java.lang.String \"+convert(p3)+\" java.net.URLStreamHandler \"+convert(p4)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "<init>", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.URL-><init>", "className": "java.net.URL", "platformVersion": "All", "paramList": ["java.lang.String", "java.lang.String", "int", "java.lang.String", "java.net.URLStreamHandler"], "signature": "redir_java_net_URL__ctor_462(Object _this , java.lang.String p0, java.lang.String p1, int p2, java.lang.String p3, java.net.URLStreamHandler p4)", "returnType": "void", "jniSignature": "Ljava/net/URL;-><init>(Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Ljava/net/URLStreamHandler;)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.URL mthd: openConnection retCls: java.net.URLConnection params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "openConnection", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "java.net.URL->openConnection", "className": "java.net.URL", "platformVersion": "All", "paramList": [], "signature": "redir_java_net_URL_openConnection_467(Object _this )", "returnType": "java.net.URLConnection", "jniSignature": "Ljava/net/URL;->openConnection()Ljava/net/URLConnection;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this);\n        return (java.net.URLConnection) monitorHook.hookAfterApiCall(logSignature, (java.net.URLConnection) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.URL mthd: openConnection retCls: java.net.URLConnection params: java.net.Proxy \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "openConnection", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "java.net.URL->openConnection", "className": "java.net.URL", "platformVersion": "All", "paramList": ["java.net.Proxy"], "signature": "redir_java_net_URL_openConnection_468(Object _this , java.net.Proxy p0)", "returnType": "java.net.URLConnection", "jniSignature": "Ljava/net/URL;->openConnection(Ljava/net/Proxy;)Ljava/net/URLConnection;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (java.net.URLConnection) monitorHook.hookAfterApiCall(logSignature, (java.net.URLConnection) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: java.net.URLConnection mthd: connect retCls: void params:  stacktrace: \"+stackTrace", "isStatic": false, "methodName": "connect", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "java.net.URLConnection->connect", "className": "java.net.URLConnection", "platformVersion": "All", "paramList": [], "signature": "redir_java_net_URLConnection_connect_481(Object _this )", "returnType": "void", "jniSignature": "Ljava/net/URLConnection;->connect()V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: org.apache.http.impl.client.AbstractHttpClient mthd: execute retCls: org.apache.http.HttpResponse params: org.apache.http.HttpHost \"+convert(p0)+\" org.apache.http.HttpRequest \"+convert(p1)+\" org.apache.http.protocol.HttpContext \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "execute", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "org.apache.http.impl.client.AbstractHttpClient->execute", "className": "org.apache.http.impl.client.AbstractHttpClient", "platformVersion": "All", "paramList": ["org.apache.http.HttpHost", "org.apache.http.HttpRequest", "org.apache.http.protocol.HttpContext"], "signature": "redir_org_apache_http_impl_client_AbstractHttpClient_execute_521(Object _this , org.apache.http.HttpHost p0, org.apache.http.HttpRequest p1, org.apache.http.protocol.HttpContext p2)", "returnType": "org.apache.http.HttpResponse", "jniSignature": "Lorg/apache/http/impl/client/AbstractHttpClient;->execute(Lorg/apache/http/HttpHost;Lorg/apache/http/HttpRequest;Lorg/apache/http/protocol/HttpContext;)Lorg/apache/http/HttpResponse;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n        return (org.apache.http.HttpResponse) monitorHook.hookAfterApiCall(logSignature, (org.apache.http.HttpResponse) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentResolver mthd: bulkInsert retCls: int params: android.net.Uri \"+convert(p0)+\" android.content.ContentValues[] \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "bulkInsert", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.content.ContentResolver->bulkInsert", "className": "android.content.ContentResolver", "platformVersion": "All", "paramList": ["android.net.Uri", "android.content.ContentValues[]"], "signature": "redir_android_content_ContentResolver_bulkInsert_548(Object _this , android.net.Uri p0, android.content.ContentValues[] p1)", "returnType": "int", "jniSignature": "Landroid/content/ContentResolver;->bulkInsert(Landroid/net/Uri;[Landroid/content/ContentValues;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentResolver mthd: delete retCls: int params: android.net.Uri \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" java.lang.String[] \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "delete", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.content.ContentResolver->delete", "className": "android.content.ContentResolver", "platformVersion": "All", "paramList": ["android.net.Uri", "java.lang.String", "java.lang.String[]"], "signature": "redir_android_content_ContentResolver_delete_549(Object _this , android.net.Uri p0, java.lang.String p1, java.lang.String[] p2)", "returnType": "int", "jniSignature": "Landroid/content/ContentResolver;->delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentResolver mthd: insert retCls: android.net.Uri params: android.net.Uri \"+convert(p0)+\" android.content.ContentValues \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "insert", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.content.ContentResolver->insert", "className": "android.content.ContentResolver", "platformVersion": "All", "paramList": ["android.net.Uri", "android.content.ContentValues"], "signature": "redir_android_content_ContentResolver_insert_550(Object _this , android.net.Uri p0, android.content.ContentValues p1)", "returnType": "android.net.Uri", "jniSignature": "Landroid/content/ContentResolver;->insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (android.net.Uri) monitorHook.hookAfterApiCall(logSignature, (android.net.Uri) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentResolver mthd: update retCls: int params: android.net.Uri \"+convert(p0)+\" android.content.ContentValues \"+convert(p1)+\" java.lang.String \"+convert(p2)+\" java.lang.String[] \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "update", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.content.ContentResolver->update", "className": "android.content.ContentResolver", "platformVersion": "All", "paramList": ["android.net.Uri", "android.content.ContentValues", "java.lang.String", "java.lang.String[]"], "signature": "redir_android_content_ContentResolver_update_551(Object _this , android.net.Uri p0, android.content.ContentValues p1, java.lang.String p2, java.lang.String[] p3)", "returnType": "int", "jniSignature": "Landroid/content/ContentResolver;->update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentResolver mthd: openInputStream retCls: java.io.InputStream params: android.net.Uri \"+convert(p0)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "openInputStream", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.content.ContentResolver->openInputStream", "className": "android.content.ContentResolver", "platformVersion": "All", "paramList": ["android.net.Uri"], "signature": "redir_android_content_ContentResolver_openInputStream_552(Object _this , android.net.Uri p0)", "returnType": "java.io.InputStream", "jniSignature": "Landroid/content/ContentResolver;->openInputStream(Landroid/net/Uri;)Ljava/io/InputStream;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0);\n        return (java.io.InputStream) monitorHook.hookAfterApiCall(logSignature, (java.io.InputStream) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentResolver mthd: openAssetFileDescriptor retCls: android.content.res.AssetFileDescriptor params: android.net.Uri \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" android.os.CancellationSignal \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "openAssetFileDescriptor", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.content.ContentResolver->openAssetFileDescriptor", "className": "android.content.ContentResolver", "platformVersion": "All", "paramList": ["android.net.Uri", "java.lang.String", "android.os.CancellationSignal"], "signature": "redir_android_content_ContentResolver_openAssetFileDescriptor_560(Object _this , android.net.Uri p0, java.lang.String p1, android.os.CancellationSignal p2)", "returnType": "android.content.res.AssetFileDescriptor", "jniSignature": "Landroid/content/ContentResolver;->openAssetFileDescriptor(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n        return (android.content.res.AssetFileDescriptor) monitorHook.hookAfterApiCall(logSignature, (android.content.res.AssetFileDescriptor) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentResolver mthd: query retCls: android.database.Cursor params: android.net.Uri \"+convert(p0)+\" java.lang.String[] \"+convert(p1)+\" java.lang.String \"+convert(p2)+\" java.lang.String[] \"+convert(p3)+\" java.lang.String \"+convert(p4)+\" android.os.CancellationSignal \"+convert(p5)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "query", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.content.ContentResolver->query", "className": "android.content.ContentResolver", "platformVersion": "All", "paramList": ["android.net.Uri", "java.lang.String[]", "java.lang.String", "java.lang.String[]", "java.lang.String", "android.os.CancellationSignal"], "signature": "redir_android_content_ContentResolver_query_563(Object _this , android.net.Uri p0, java.lang.String[] p1, java.lang.String p2, java.lang.String[] p3, java.lang.String p4, android.os.CancellationSignal p5)", "returnType": "android.database.Cursor", "jniSignature": "Landroid/content/ContentResolver;->query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4, p5);\n        return (android.database.Cursor) monitorHook.hookAfterApiCall(logSignature, (android.database.Cursor) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentResolver mthd: registerContentObserver retCls: void params: android.net.Uri \"+convert(p0)+\" boolean \"+convert(p1)+\" android.database.ContentObserver \"+convert(p2)+\" int \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "registerContentObserver", "defaultReturnValue": "", "policy": "Allow", "hookedMethod": "android.content.ContentResolver->registerContentObserver", "className": "android.content.ContentResolver", "platformVersion": "All", "paramList": ["android.net.Uri", "boolean", "android.database.ContentObserver", "int"], "signature": "redir_android_content_ContentResolver_registerContentObserver_566(Object _this , android.net.Uri p0, boolean p1, android.database.ContentObserver p2, int p3)", "returnType": "void", "jniSignature": "Landroid/content/ContentResolver;->registerContentObserver(Landroid/net/Uri;ZLandroid/database/ContentObserver;I)V", "invokeAPICode": "\n         OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n          monitorHook.hookAfterApiCall(logSignature,  null);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentProviderClient mthd: bulkInsert retCls: int params: android.net.Uri \"+convert(p0)+\" android.content.ContentValues[] \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "bulkInsert", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.content.ContentProviderClient->bulkInsert", "className": "android.content.ContentProviderClient", "platformVersion": "All", "paramList": ["android.net.Uri", "android.content.ContentValues[]"], "signature": "redir_android_content_ContentProviderClient_bulkInsert_571(Object _this , android.net.Uri p0, android.content.ContentValues[] p1)", "returnType": "int", "jniSignature": "Landroid/content/ContentProviderClient;->bulkInsert(Landroid/net/Uri;[Landroid/content/ContentValues;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentProviderClient mthd: delete retCls: int params: android.net.Uri \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" java.lang.String[] \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "delete", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.content.ContentProviderClient->delete", "className": "android.content.ContentProviderClient", "platformVersion": "All", "paramList": ["android.net.Uri", "java.lang.String", "java.lang.String[]"], "signature": "redir_android_content_ContentProviderClient_delete_572(Object _this , android.net.Uri p0, java.lang.String p1, java.lang.String[] p2)", "returnType": "int", "jniSignature": "Landroid/content/ContentProviderClient;->delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentProviderClient mthd: insert retCls: android.net.Uri params: android.net.Uri \"+convert(p0)+\" android.content.ContentValues \"+convert(p1)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "insert", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.content.ContentProviderClient->insert", "className": "android.content.ContentProviderClient", "platformVersion": "All", "paramList": ["android.net.Uri", "android.content.ContentValues"], "signature": "redir_android_content_ContentProviderClient_insert_573(Object _this , android.net.Uri p0, android.content.ContentValues p1)", "returnType": "android.net.Uri", "jniSignature": "Landroid/content/ContentProviderClient;->insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1);\n        return (android.net.Uri) monitorHook.hookAfterApiCall(logSignature, (android.net.Uri) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentProviderClient mthd: update retCls: int params: android.net.Uri \"+convert(p0)+\" android.content.ContentValues \"+convert(p1)+\" java.lang.String \"+convert(p2)+\" java.lang.String[] \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "update", "defaultReturnValue": "0", "policy": "Allow", "hookedMethod": "android.content.ContentProviderClient->update", "className": "android.content.ContentProviderClient", "platformVersion": "All", "paramList": ["android.net.Uri", "android.content.ContentValues", "java.lang.String", "java.lang.String[]"], "signature": "redir_android_content_ContentProviderClient_update_574(Object _this , android.net.Uri p0, android.content.ContentValues p1, java.lang.String p2, java.lang.String[] p3)", "returnType": "int", "jniSignature": "Landroid/content/ContentProviderClient;->update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n        return (Integer) monitorHook.hookAfterApiCall(logSignature, (Integer) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentProviderClient mthd: openFile retCls: android.os.ParcelFileDescriptor params: android.net.Uri \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" android.os.CancellationSignal \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "openFile", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.content.ContentProviderClient->openFile", "className": "android.content.ContentProviderClient", "platformVersion": "All", "paramList": ["android.net.Uri", "java.lang.String", "android.os.CancellationSignal"], "signature": "redir_android_content_ContentProviderClient_openFile_578(Object _this , android.net.Uri p0, java.lang.String p1, android.os.CancellationSignal p2)", "returnType": "android.os.ParcelFileDescriptor", "jniSignature": "Landroid/content/ContentProviderClient;->openFile(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/os/ParcelFileDescriptor;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n        return (android.os.ParcelFileDescriptor) monitorHook.hookAfterApiCall(logSignature, (android.os.ParcelFileDescriptor) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentProviderClient mthd: openAssetFile retCls: android.content.res.AssetFileDescriptor params: android.net.Uri \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" android.os.CancellationSignal \"+convert(p2)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "openAssetFile", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.content.ContentProviderClient->openAssetFile", "className": "android.content.ContentProviderClient", "platformVersion": "All", "paramList": ["android.net.Uri", "java.lang.String", "android.os.CancellationSignal"], "signature": "redir_android_content_ContentProviderClient_openAssetFile_580(Object _this , android.net.Uri p0, java.lang.String p1, android.os.CancellationSignal p2)", "returnType": "android.content.res.AssetFileDescriptor", "jniSignature": "Landroid/content/ContentProviderClient;->openAssetFile(Landroid/net/Uri;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2);\n        return (android.content.res.AssetFileDescriptor) monitorHook.hookAfterApiCall(logSignature, (android.content.res.AssetFileDescriptor) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentProviderClient mthd: openTypedAssetFileDescriptor retCls: android.content.res.AssetFileDescriptor params: android.net.Uri \"+convert(p0)+\" java.lang.String \"+convert(p1)+\" android.os.Bundle \"+convert(p2)+\" android.os.CancellationSignal \"+convert(p3)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "openTypedAssetFileDescriptor", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.content.ContentProviderClient->openTypedAssetFileDescriptor", "className": "android.content.ContentProviderClient", "platformVersion": "All", "paramList": ["android.net.Uri", "java.lang.String", "android.os.Bundle", "android.os.CancellationSignal"], "signature": "redir_android_content_ContentProviderClient_openTypedAssetFileDescriptor_581(Object _this , android.net.Uri p0, java.lang.String p1, android.os.Bundle p2, android.os.CancellationSignal p3)", "returnType": "android.content.res.AssetFileDescriptor", "jniSignature": "Landroid/content/ContentProviderClient;->openTypedAssetFileDescriptor(Landroid/net/Uri;Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;)Landroid/content/res/AssetFileDescriptor;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3);\n        return (android.content.res.AssetFileDescriptor) monitorHook.hookAfterApiCall(logSignature, (android.content.res.AssetFileDescriptor) returnVal);\n    ", "customPolicyConstraint": ""}, {"logID": " \"TId: \"+threadId+\" objCls: android.content.ContentProviderClient mthd: query retCls: android.database.Cursor params: android.net.Uri \"+convert(p0)+\" java.lang.String[] \"+convert(p1)+\" java.lang.String \"+convert(p2)+\" java.lang.String[] \"+convert(p3)+\" java.lang.String \"+convert(p4)+\" android.os.CancellationSignal \"+convert(p5)+\" stacktrace: \"+stackTrace", "isStatic": false, "methodName": "query", "defaultReturnValue": "null", "policy": "Allow", "hookedMethod": "android.content.ContentProviderClient->query", "className": "android.content.ContentProviderClient", "platformVersion": "All", "paramList": ["android.net.Uri", "java.lang.String[]", "java.lang.String", "java.lang.String[]", "java.lang.String", "android.os.CancellationSignal"], "signature": "redir_android_content_ContentProviderClient_query_585(Object _this , android.net.Uri p0, java.lang.String[] p1, java.lang.String p2, java.lang.String[] p3, java.lang.String p4, android.os.CancellationSignal p5)", "returnType": "android.database.Cursor", "jniSignature": "Landroid/content/ContentProviderClient;->query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;", "invokeAPICode": "\n        Object returnVal =  OriginalMethod.by(new $() {}).invoke (_this, p0, p1, p2, p3, p4, p5);\n        return (android.database.Cursor) monitorHook.hookAfterApiCall(logSignature, (android.database.Cursor) returnVal);\n    ", "customPolicyConstraint": ""}]}